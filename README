oren503
ogetzler



=============================
=      File description     =
=============================
oop.ex6/main/Sjavac:
This class is a s-Java verifier - a tool able to verify the validity of s-Java code.

oop.ex6/main/SjavacReader.java:
This class reads a line of sjava file and redirects it to the appropriate parser.

oop.ex6/main/Method.java:
This class represent a sjava method.

oop.ex6/main/Variable.java:
This class represent a sjava variable.

oop.ex6/main/InvalidUsageException.java:
This class represents an invalid usage exception, e.g. Sjavac receives more than one argument.

oop.ex6/parsesjava/SjavaParser.java:
This class represents a sjava parser which is able to parse different components of the sjava file.

oop.ex6/parsesjava/MethodsParser.java:
Goes over different methods, and tests whether or not they are legal.

oop.ex6/parsesjava/VariableParser.java:
This class receives a variable line, parses it and extricates from her the variables.

oop.ex6/parsesjava/IllegalLineException.java:
This class represent an illegal line exception.



=============================
=          Design           =
=============================
We chose to divide our code into two packages. The first is the main which contains the general departments
of the program- Method, Varibles, Sjavc, SjavacReader, InvalidUsageException. And the second package is a
package containing all the classes related to parsing- MethodsParser, VariablesParser,SjavaParser,
IllegalLineException.

We chose to divide the program into four main components: The first is the Sjavac class which contains the
main method which is the manager of the program - it is the class that the user runs, it is responsible for
running all the components, and it is the one that finally returns if the sjava code is valid. A second
component is the SjavacReader class whose job is to read line by line from the sjavac file and depending on
the content of the line it works: refers to the analysis of variables and collects the methods to the list. A
third component is the VariablesParser class which is solely responsible for analyzing variables. A
fourth component is the MethodsParser class which analyzes the methods.

We used an abstract class named "SjavaParser" which is able to parse different components of
the sjava file. The classes "MethodsParser" and "VariableParser" have a "is-a" relation with it.
We thought that an abstract class would best fit our program for the following reasons:
* "MethodParser" and "VariableParser" are two kinds of the same thing - "SjavaParser".
* "SjavaParser" uses an abstract method.
* An instance of "SjavaParser" doesn't make any sense.
* he two sub-classes have similar characteristics, and as a result they need similar and sometimes even
 identical methods. An example of this is the abstract parse method we want to impose on every sub-class of
 SjavaParser.
* In addition, This design allows us to concentrate any implementation that contains specific types of
 variables to one class (parent class). That is,the only class (except the constant LEGAL_TYPE) which is aware
 of all the possibilities of the different types of variables is the class SjavaParser. This makes it easier
 to extend the code to other types of variables and to debug.

Because there are variable methods, and in order to prevent code recurrence we have chosen that the
MethodsParser class will use the VariablesParser class, which is with it in the same package, whenever it
encounters a variable. That is, the VariablesParser class stands on its own and the MethodsParser class uses
it. This design allows for modularity and yet complementary work of the various components.



=============================
=  Implementation details   =
=============================
1) We used a Deque - "variablesStack" to keep track of the different scopes. E.g. the first element
   represents the global scope, the second element represent a method's local scope, the third element
   can represent a while scope and so on.
   In addition, We have chosen that the Deque be static in order to allow all the components of the
   program to work together - all the components are exposed to the state of the Deque and can affect it.

2) We used recursion in the "MethodsParser" class to handle the if\while block.




=============================
=    Answers to questions   =
=============================
Q: How you handled s-Java code errors, and why you chose to do so?
A: We handled s-Java code errors by using the exception mechanism. This way, we can easily propagate
   errors up the call stack. In addition, it helps separating error handling code from the rest of the code.

Q: How would you modify your code to add new types of variables (e.g. float)?
A: We would add the new types to the field "LEGAL_TYPE" which belongs to the class "VariableParser".

Q: Which modifications/extensions you would have to make in your code in order to support
   the following features?
A: * Classes:
     We would extend the code by adding a new class - "ClassParser", which will also inherit from
     SjavaParser. Additionally, it will use "MethodsParser" And "VariableParser" to parse
     methods and variables
   * Different method's types:
     We would add the new types to the field "LEGAL_METHOD_TYPE" which belongs to the class "MethodsParser",
     and make sure that the "checkReturn" method supports the new types.

Q: What are the two main regular expressions you used in your code?
A: 1) Check if a method's signature is legal - "[ \t]*+void[ \t]*+([a-zA-Z]+[_0-9]*)[ \t]*+\\(".
   2) Check if a variable's name is legal - "[ \t]*+(?:[a-zA-Z_][a-zA-Z0-9]++|[a-zA-Z])[\\w]*+".
